.TH "MatBase< H, W, T >" 3 "Fri Mar 11 2022" "Version V2.0" "MatrixVectorHeader" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MatBase< H, W, T > \- Base matrix class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Matrix\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMatBase\fP ()"
.br
.RI "Data manipulation\&. "
.ti -1c
.RI "\fBMatBase\fP (const \fBMatBase\fP< H, W, T > &m1)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fBMatBase\fP (std::initializer_list< std::initializer_list< T > > v)"
.br
.RI "Construct a new \fBMatBase\fP object based on an initializer list\&. "
.ti -1c
.RI "\fB~MatBase\fP ()"
.br
.RI "Destroy the \fBMatBase\fP object\&. "
.ti -1c
.RI "\fBVec\fP< W, T > & \fBoperator[]\fP (int i)"
.br
.ti -1c
.RI "\fBVec\fP< W, T > \fBoperator[]\fP (int i) const"
.br
.ti -1c
.RI "\fBVec\fP< W, T > \fBGetRow\fP (const unsigned int i) const"
.br
.RI "Returns the row at given position\&. "
.ti -1c
.RI "\fBVec\fP< H, T > \fBGetColumn\fP (const unsigned int i) const"
.br
.RI "Returns the column at given position\&. "
.ti -1c
.RI "void \fBSetRow\fP (const unsigned int i, const \fBVec\fP< W, T > V)"
.br
.RI "Set the row of the matrix\&. "
.ti -1c
.RI "void \fBSetColumn\fP (const unsigned int i, const \fBVec\fP< H, T > V)"
.br
.RI "Sets the column of the matrix\&. "
.ti -1c
.RI "\fBMatBase\fP< H, W, T > \fBTranspose\fP (void) const"
.br
.RI "Transposes the matrix\&. "
.ti -1c
.RI "template<typename N > \fBMatBase\fP< H, W, T > & \fBoperator*=\fP (const \fBMatBase\fP< H, W, N > &B)"
.br
.RI "Operator overloads\&. "
.ti -1c
.RI "template<int W2, typename N > const \fBMatBase\fP< H, W2, T > \fBoperator*\fP (const \fBMatBase\fP< W, W2, N > &B) const"
.br
.RI "Multiplies the matrix with another, allows for different matrix sizes\&. "
.ti -1c
.RI "template<typename N > const \fBMatBase\fP< H, W, T > \fBoperator*\fP (const \fBMatBase\fP< H, W, N > &B) const"
.br
.RI "Multiplies the matrix with another\&. "
.ti -1c
.RI "template<typename N > \fBMatBase\fP< H, W, T > & \fBoperator*=\fP (const N &r)"
.br
.RI "Scales matrix inplace\&. "
.ti -1c
.RI "template<typename N > const \fBMatBase\fP< H, W, T > \fBoperator*\fP (const N &r) const"
.br
.RI "Scales matrix\&. "
.ti -1c
.RI "template<typename N > \fBMatBase\fP< H, W, T > & \fBoperator+=\fP (const \fBMatBase\fP< H, W, N > &B)"
.br
.RI "Adds two matrices together inplace\&. "
.ti -1c
.RI "template<typename N > const \fBMatBase\fP< H, W, T > \fBoperator+\fP (const \fBMatBase\fP< H, W, N > &B) const"
.br
.RI "Adds two matrices together\&. "
.ti -1c
.RI "template<typename N > \fBMatBase\fP< H, W, T > & \fBoperator\-=\fP (const \fBMatBase\fP< H, W, N > &B)"
.br
.RI "Subtracts matrix B from the matrix inplace\&. "
.ti -1c
.RI "template<typename N > const \fBMatBase\fP< H, W, T > \fBoperator\-\fP (const \fBMatBase\fP< H, W, N > &B) const"
.br
.RI "Subtracts matrix B from the matrix\&. "
.ti -1c
.RI "template<typename N > const \fBVec\fP< H, T > \fBoperator*\fP (const \fBVec\fP< W, N > &V) const"
.br
.RI "Multiplies a vector to a matrix\&. "
.ti -1c
.RI "template<typename Cast > \fBoperator MatBase< H, W, Cast >\fP () const"
.br
.RI "Casts matrix to different matrix type\&. "
.ti -1c
.RI "void \fBprint\fP ()"
.br
.RI "prints out the values of the matrix "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<unsigned int H, unsigned int W = H, typename T = double>
.br
class MatBase< H, W, T >"Base matrix class\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<unsigned int H, unsigned int W, typename T > \fBMatBase\fP< H, W, T >::\fBMatBase\fP"

.PP
Data manipulation\&. Construct a new empty \fBMatBase\fP object
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > \fBMatBase\fP< H, W, T >::\fBMatBase\fP (const \fBMatBase\fP< H, W, T > & m1)"

.PP
Copy constructor\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.RE
.PP
\fBParameters\fP
.RS 4
\fIm1\fP the \fBMatBase\fP object to copy from 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > \fBMatBase\fP< H, W, T >::\fBMatBase\fP (std::initializer_list< std::initializer_list< T > > v)"

.PP
Construct a new \fBMatBase\fP object based on an initializer list\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.RE
.PP
\fBParameters\fP
.RS 4
\fIv\fP the initializer list 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > \fBMatBase\fP< H, W, T >::~\fBMatBase\fP"

.PP
Destroy the \fBMatBase\fP object\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<unsigned int H, unsigned int W, typename T > \fBVec\fP< H, T > \fBMatBase\fP< H, W, T >::GetColumn (const unsigned int i) const"

.PP
Returns the column at given position\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.RE
.PP
\fBParameters\fP
.RS 4
\fIi\fP the column position 
.RE
.PP
\fBReturns\fP
.RS 4
Vec<H, T> vector containing the column 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > \fBVec\fP< W, T > \fBMatBase\fP< H, W, T >::GetRow (const unsigned int i) const"

.PP
Returns the row at given position\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.RE
.PP
\fBParameters\fP
.RS 4
\fIi\fP the row position 
.RE
.PP
\fBReturns\fP
.RS 4
Vec<W, T> vector containing the row 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > template<typename Cast > \fBMatBase\fP< H, W, T >::operator \fBMatBase\fP< H, W, Cast >"

.PP
Casts matrix to different matrix type\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.br
\fICast\fP the new datatype of the matrix 
.RE
.PP
\fBReturns\fP
.RS 4
MatBase<H, W, Cast> the casted matrix 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > template<typename N > const \fBMatBase\fP< H, W, T > \fBMatBase\fP< H, W, T >::operator* (const \fBMatBase\fP< H, W, N > & B) const"

.PP
Multiplies the matrix with another\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.br
\fIN\fP datatype of the 2nd matrix 
.RE
.PP
\fBParameters\fP
.RS 4
\fIB\fP the 2nd matrix 
.RE
.PP
\fBReturns\fP
.RS 4
const MatBase<H, W, T> the multiplied matrix object 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > template<int W2, typename N > const \fBMatBase\fP< H, W2, T > \fBMatBase\fP< H, W, T >::operator* (const \fBMatBase\fP< W, W2, N > & B) const"

.PP
Multiplies the matrix with another, allows for different matrix sizes\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.br
\fIW2\fP width of the 2nd matrix 
.br
\fIN\fP datatype of the 2nd matrix 
.RE
.PP
\fBParameters\fP
.RS 4
\fIB\fP the 2nd matrix 
.RE
.PP
\fBReturns\fP
.RS 4
const MatBase<H, W2, T> the multiplied matrix object 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > template<typename N > const \fBMatBase\fP< H, W, T > \fBMatBase\fP< H, W, T >::operator* (const N & r) const"

.PP
Scales matrix\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.br
\fIN\fP datatype of the scalar 
.RE
.PP
\fBParameters\fP
.RS 4
\fIr\fP the scalar 
.RE
.PP
\fBReturns\fP
.RS 4
const MatBase<H, W , T> the scaled matrix 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > template<typename N > const \fBVec\fP< H, T > \fBMatBase\fP< H, W, T >::operator* (const \fBVec\fP< W, N > & V) const"

.PP
Multiplies a vector to a matrix\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.br
\fIN\fP datatype of the vector 
.RE
.PP
\fBParameters\fP
.RS 4
\fIV\fP the vector to multiply with 
.RE
.PP
\fBReturns\fP
.RS 4
const Vec<H, T> 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > template<typename N > \fBMatBase\fP< H, W, T > & \fBMatBase\fP< H, W, T >::operator*= (const \fBMatBase\fP< H, W, N > & B)"

.PP
Operator overloads\&. Multiplies the matrix with another inplace
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.br
\fIN\fP datatype of the 2nd matrix 
.RE
.PP
\fBParameters\fP
.RS 4
\fIB\fP the 2nd matrix 
.RE
.PP
\fBReturns\fP
.RS 4
MatBase<H, W, T>& reference to the multiplied matrix object 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > template<typename N > \fBMatBase\fP< H, W, T > & \fBMatBase\fP< H, W, T >::operator*= (const N & r)"

.PP
Scales matrix inplace\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.br
\fIN\fP datatype of the scalar 
.RE
.PP
\fBParameters\fP
.RS 4
\fIr\fP the scalar 
.RE
.PP
\fBReturns\fP
.RS 4
MatBase<H, W , T>& reference to the scaled matrix 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > template<typename N > const \fBMatBase\fP< H, W, T > \fBMatBase\fP< H, W, T >::operator+ (const \fBMatBase\fP< H, W, N > & B) const"

.PP
Adds two matrices together\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.br
\fIN\fP datatype of the 2nd matrix 
.RE
.PP
\fBParameters\fP
.RS 4
\fIB\fP the 2nd matrix 
.RE
.PP
\fBReturns\fP
.RS 4
const MatBase<H, W , T> the resulting matrix 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > template<typename N > \fBMatBase\fP< H, W, T > & \fBMatBase\fP< H, W, T >::operator+= (const \fBMatBase\fP< H, W, N > & B)"

.PP
Adds two matrices together inplace\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.br
\fIN\fP datatype of the 2nd matrix 
.RE
.PP
\fBParameters\fP
.RS 4
\fIB\fP the 2nd matrix 
.RE
.PP
\fBReturns\fP
.RS 4
MatBase<H, W , T>& reference to the matrix 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > template<typename N > const \fBMatBase\fP< H, W, T > \fBMatBase\fP< H, W, T >::operator\- (const \fBMatBase\fP< H, W, N > & B) const"

.PP
Subtracts matrix B from the matrix\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.br
\fIN\fP datatype of the 2nd matrix 
.RE
.PP
\fBParameters\fP
.RS 4
\fIB\fP the 2nd matrix 
.RE
.PP
\fBReturns\fP
.RS 4
const MatBase<H, W , T> the resulting matrix 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > template<typename N > \fBMatBase\fP< H, W, T > & \fBMatBase\fP< H, W, T >::operator\-= (const \fBMatBase\fP< H, W, N > & B)"

.PP
Subtracts matrix B from the matrix inplace\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.br
\fIN\fP datatype of the 2nd matrix 
.RE
.PP
\fBParameters\fP
.RS 4
\fIB\fP the 2nd matrix 
.RE
.PP
\fBReturns\fP
.RS 4
MatBase<H, W , T>& reference to the matrix 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > void \fBMatBase\fP< H, W, T >::SetColumn (const unsigned int i, const \fBVec\fP< H, T > V)"

.PP
Sets the column of the matrix\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.RE
.PP
\fBParameters\fP
.RS 4
\fIi\fP the column position 
.br
\fIV\fP the vector of values 
.RE
.PP

.SS "template<unsigned int H, unsigned int W, typename T > void \fBMatBase\fP< H, W, T >::SetRow (const unsigned int i, const \fBVec\fP< W, T > V)"

.PP
Set the row of the matrix\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.RE
.PP
\fBParameters\fP
.RS 4
\fIi\fP the row position 
.br
\fIV\fP the vector of values 
.RE
.PP

.SS "template<unsigned H, unsigned int W, typename T > \fBMatBase\fP< H, W, T > \fBMatBase\fP< H, W, T >::Transpose (void) const"

.PP
Transposes the matrix\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIH\fP height of the matrix 
.br
\fIW\fP width of the matrix 
.br
\fIT\fP datatype of the matrix 
.RE
.PP
\fBReturns\fP
.RS 4
MatBase<H, W, T> The transposed matrix 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for MatrixVectorHeader from the source code\&.
